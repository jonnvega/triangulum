* Triangulum

A Clojure library establishing a web app framework around Jetty and Ring.

** Library Usage

*** Using Triangulum package

Add the package to dep.edn

#+begin_src clojure
sig-gis/triangulum  {:git/url "https://github.com/sig-gis/triangulum"
                     :sha "5cc44fdb0aa43bb8613cb888dbb945fa57400ed9"}
#+end_src

*** triangulum.config

To make organizing an application's configurations simpler, create a
~config.edn~ file in the project's root directory. The file is just a hashmap.

#+begin_src clojure
;; config.edn
{:database {:user "triangulum"
            :pass "secretpassword"}
 :server   {:port 8080
            :mode "dev"}}
#+end_src

Add config.edn to your ~.gitignore~ file to keep sensitive information out of
the git history.

To validate the config.edn file, run:
#+begin_src sh
clojure -M:config validate [-f FILE]
#+end_src

To retrieve a configuration, use ~get-config~. You can supply nested
configuration keys as follows:

#+begin_src clojure
(triangulum.config/get-config :database) ;; -> {:user "triangulum" :pass "..."}
(triangulum.config/get-config :database :user) ;; -> "triangulum"

(triangulum.config/get-config :server) ;; -> {:port 8080 :mode "dev"}
(triangulum.config/get-config :server :port) ;; -> 8080
#+end_src

See each section below for an example configuration if one is required for use.

*** triangulum.logging

To send a message to the logger use ~log~ or ~log-str~. ~log~ can take an
optional argument to specify not default behavior. The default values are
shown below. ~log-str~ always uses the default values.

#+begin_src clojure
(log "Hello world" {:newline? true :pprint? false :force-stdout? false})
(log-str "Hello" "world")
#+end_src

By default the above will log to standard out. If you would like to
have the system log to YYYY-DD-MM.log, set a log path. You can either specify
a path relative to the toplevel directory of the main project repository or an
absolute path on your filesystem. The logger will keep the 10 most recent logs
(where a new log is created every day at midnight). To stop the logging server
set path to "".

#+begin_src clojure
(set-log-path "logs")
(set-log-path "")
#+end_src

*** triangulum.database

To use ~triangulum.database~, first add your database connection
configurations to a ~config.edn~ file in your project's root directory.

For example:
#+begin_src clojure
;; config.edn
{:database {:host     "localhost"
            :port     5432
            :dbname   "pyregence"
            :user     "pyregence"
            :password "pyregence"}}
#+end_src

To run a postgres sql command use ~call-sql~. Currently ~call-sql~
only works with postgres. With the second parameter can be an
optional settings map (default values shown below).

#+begin_src clojure
(call-sql "function" {:log? true :use-vec? false} "param1" "param2" ... "paramN")
#+end_src

To run a sqllite3 sql command use ~call-sqlite~. An existing sqllite3 database
must be provided.

#+begin_src clojure
(call-sqlite "select * from table" "path/db-file")
#+end_src

To insert new rows or update existing rows use ~insert-rows!~ and
~update-rows!~. If fields are not provided, the first row will be assumed to
be the field names.

#+begin_src clojure
(insert-rows! table-name rows-vector fields-map)
(update-rows! table-name rows-vector column-to-update fields-map)
#+end_src

*** triangulum.build-db

- [[https://www.postgresql.org/download][Postgresql (version 12)]]

Use CEO as example on how to set up the folder and file structure for use with
build-db. [[https://github.com/openforis/collect-earth-online][CEO github]]

*Postgresql* needs to be installed on the machine that will be hosting
this website. This installation task is system specific and is beyond
the scope of this README, so please follow the instructions for your
operating system and Postgresql version. However, please ensure that
the database server's superuser account is named "postgres" and that
you know its database connection password before proceeding.

Once the Postgresql database server is running on your machine, you
should navigate to the top level directory (i.e., the directory
containing this README) and run the database build command as follows:

#+begin_src sh
clojure -M:build-db build-all -d database [-u user] [-p admin password]
#+end_src

This will call ./src/sql/create_db.sql, stored in the individual project
repository.  A variable ~database~ is set for the command line call to
create_db.sql.  This allows your project to generate the project database
with a different name, depending on your deployment.  To use this variable
type ~:database~ in create_db.sql where needed.

triangulum.build-db can also be configured through config.edn.  It uses
the same configuration as triangulum.database (see above).

*** triangulum.https

- [[https://certbot.eff.org/][certbot]]
- [[https://www.openssl.org/source/][openssl]]

If you have not already created a SSL certificate, you must start a server
without a https port specified.

To automatically create an SSL certificate signed by [[https://letsencrypt.org][Let's Encrypt]],
simply run the following command from your shell:

#+begin_src sh
clojure -M:https --certbot-init -d mydomain.com [-p certbot-dir]
#+end_src

The certbot creation process will run automatically and silently. After completion,
a shell script, [mydomain].sh, will be created in the certbot deploy hooks folder
(default /etc/letsencrypt/renewal-hooks/deploy). This script will run
~clojure -M:https --package-cert~ Scripts in this folder will run automatically
when a new certificate is created.

Note: If your certbot installation stores its config files in a
directory other than /etc/letsencrypt, you should specify it with the
optional certbot-dir argument to certbot-init.

While there should be no need to do so, if you ever want to perform
this repackaging step manually, simply run this command from your
shell:

#+begin_src sh
clojure -M:https --package-cert -d mydomain.com [-p certbot-dir]
#+end_src

Certbot runs as a background task every 12 hours and will renew any
certificate that is set to expire in 30 days or less. Each time the
certificate is renewed, certbot-deploy-hook.sh will be run
automatically to repackage the updated certificate into the correct
format.

*** triangulum.https / triangulum.build-db aliases

Add alias to ~deps.edn~.

#+begin_src clojure
{:aliases {:build-db {:main-opts ["-m" "triangulum.build-db"]}
           :https    {:main-opts ["-m" "triangulum.https"]}}}
#+end_src

Then call the alias without any params to see the available commands.

#+begin_src sh
clojure -M:build-db
clojure -M:https
#+end_src

- Note, ~clojure -M:https~ needs to be run as sudo when executing a command.

** Useful Development Aliases

*** check-deps

To check for outdated dependencies, run:

#+begin_src sh
clojure -M:check-deps
#+end_src

Remember to update deps.edn with any new versions that are found.

*** deploy-jar

To build a JAR from this library and deploy it to clojars.org, run:

#+begin_src sh
env CLOJARS_USERNAME=your-username CLOJARS_PASSWORD=your-clojars-token clojure -M:deploy-jar
#+end_src

NOTE: As of 2020-06-27, Clojars will no longer accept your Clojars
password when deploying. You will have to use a token instead. Please
read more about this [[https://github.com/clojars/clojars-web/wiki/Deploy-Tokens][here]].

*** test

To launch the test suite, run:

#+begin_src sh
clojure -M:test
#+end_src

** License

Copyright Â© 2021 Spatial Informatics Group, LLC.

Triangulum is distributed by Spatial Informatics Group, LLC. under the
terms of the Eclipse Public License version 2.0 (EPLv2). See
LICENSE.txt in this directory for more information.
